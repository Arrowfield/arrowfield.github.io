{
    "version": "https://jsonfeed.org/version/1",
    "title": "zip",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/02/Solo%E5%8D%9A%E5%AE%A2%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/",
            "url": "http://example.com/2022/04/02/Solo%E5%8D%9A%E5%AE%A2%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/",
            "title": "Solo博客前端部署",
            "date_published": "2022-04-02T09:58:00.000Z",
            "content_html": "<p>这是第二次更新这篇文档了，2020 年 6 月份的时候，有尝试搭建过一次自己的博客网站。当时可以使用学生优惠，云服务器大概就 50 多，然后就下单第一次购买了云服务器。接下来也购买了域名，然后走备案流程，大概 7 天备案号就可以下来。云服务器是今年 6 月份过期的，之前的数据不多，服务器资源释放后，啥也没有了。自己的文笔不太好，也不太会写文章，看着别的博主写的文章，然后跟着他们写的，这也是第一次写这些大段的话，所以废话有点多，见谅。</p>\n<p>刚开始时，是使用自己写的代码搭建的博客平台，前端样式，管理端是使用的 element-admin 进行二次修改的，后端的接口是使用 Springboot 的开发的。不过这样耗费的时间有点多，还要兼顾浏览器的兼容。后来在网上看，觉得 Solo 使用 docker 搭建的博客，比较美观，主题皮肤挺好看，看着另外一个博主写的文章，跟着他的步骤，最后把网站就搭建好了。</p>\n<p>个人觉得 Solo 的管理系统的富文本系统非常好用。下面介绍下 Solo 博客的搭建流程，以及遇到的坑。</p>\n<p><img data-src=\"https://b3logfile.com/bing/20180919.jpg?imageView2/1/w/960/h/540/interlace/1/q/100\" alt=\"\" /></p>\n<h1 id=\"购买服务器\"><a class=\"anchor\" href=\"#购买服务器\">#</a> 购买服务器</h1>\n<p>首先我们需要购买自己的 ECS 服务器，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY3MtYnV5LmFsaXl1bi5jb20vd2l6YXJkLz9hY2NvdW50dHJhY2VpZD1kMmMwZGExNWUyN2Q0YWQyOTNiZWMwNjgzM2M1MTY0ZXJ3a3IjL3ByZXBheS9jbi1zaGVuemhlbg==\">阿里云</span>，腾讯云，新浪云，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9jbi8=\">亚马逊</span>都行，个人推荐阿里云，后期需要备案在阿里云也比较方便，亚马逊似乎要绑定个人信用卡，我现在也没有办信用卡😂 。</p>\n<p><img data-src=\"https://b3logfile.com/file/2021/09/image-a73eaad1.png\" alt=\"image.png\" /></p>\n<p>因为现在超过 24 岁了，不能使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9kYWlseS1hY3QvZWNzL2FjdGl2aXR5X3NlbGVjdGlvbj9zcG09NTE3Ni44Nzg5NzgwLkpfMzk2NTY0MTQ3MC4xLjVmY2Q0NWI1V0h0RkVtJUMyJUFFaW9uSWQ9Y24taGFuZ3pob3U=\">学生优惠</span>，因此买了突发性能实例 t6 配置 2 核 2G1M，一年大概花费了 300。大学期间用来学习的，似乎现在可以使用免费使用的策略。系统的话，推荐使用 CentOS8.4，也是 linux 最新版本了。内存最好还是 2G 的比较稳定，个人之前买的 1G 的内存，跑个 docker，系统很容易卡死，重启也比较慢，不过可以升降配，于是我自己升级成 2g，日常运行也会跑到占用 70%。对 vps 国外服务器感兴趣的可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsdHIuY29tLw==\"> vultr</span> 等服务器</p>\n<h1 id=\"域名购买\"><a class=\"anchor\" href=\"#域名购买\">#</a> 域名购买</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93YW53YW5nLmFsaXl1bi5jb20v\">万网</span><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1maHEuY29t\">上.com</span>，.cn 的域名比较贵，.top 的估计是最便宜的了。阿里云的域名，基本上都会备案，不要购买些奇奇怪怪的域名，必须是<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1lcXJ0MmcueG4tLXZ1cTg2MWIv\">可备案的</span>，备案后我们博客就可通过域名访问，没备案时就会提示，如果服务器是国外的，似乎就不用备案了。不进行备案，大概率会封掉 80，443 端口</p>\n<p><img data-src=\"https://b3logfile.com/file/2021/09/image-51fa1ea7.png\" alt=\"image.png\" /></p>\n<h1 id=\"域名解析与备案\"><a class=\"anchor\" href=\"#域名解析与备案\">#</a> 域名解析与备案</h1>\n<p>去年有进行过一次备案流程，大概话了 6 到 7 个工作日，第一个大的流程是阿里云的初审，需要提供身份证的正反面的照片，要提供居住证或者工作地区的社保卡，不同省份的备案流程也可能不同，比如我在深圳工作，去年不用写备案承诺书，今年就要求需要下载备案承诺书文档，于是我将通信地址改成老家，就不需要了。然后工作人员可能会要求使用钉钉进行视频核验流程，或者录制承诺视频发工作人员邮箱，才能保证初审的通过，然后是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iZWlhbi5taWl0Lmdvdi5jbi8jL0ludGVncmF0ZWQvaW5kZXg=\">信息核验</span>，以及管局终审。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iZWlhbi5hbGl5dW4uY29tL3BjQ29udGFpbmVyL215b3JkZXI=\">查看备案流程以及结果</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbnMuY29uc29sZS5hbGl5dW4uY29tLz9zcG09NTE3Ni4xMDAyNTEuMTExMjUyLjE3LjVmYzM0ZjE1bnY1YWdpIy9kbnMvc2V0dGluZy96aXBibG9nLnRvcA==\">域名解析</span>流程很快，就 1，2 分钟，就可以搞定。</p>\n<p><img data-src=\"https://b3logfile.com/file/2021/09/image-82effb14.png\" alt=\"image.png\" /></p>\n<h1 id=\"为服务器安装系统\"><a class=\"anchor\" href=\"#为服务器安装系统\">#</a> 为服务器安装系统</h1>\n<p>购买服务器后，会默认装上你选择的相应的系统，会要求设置用户登录密码，以及 ssh 服务的登录账号以及密码，通常账号名是 root，为避免后期的麻烦，服务器购买后，需要开放安全组部分端口，入方向默认会开放 22，80。然后我们可能需要开放 3306，443，8080，3000。22 端口可以让我们使用 window 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmV0c2FyYW5nLmNvbS96aC94c2hlbGwv\"> xshell</span> 连接远程服务器，这块有个坑</p>\n<blockquote>\n<p>我弄了好几天，就是家的电信网络将 22 的端口给封了。我使用公司的网络和手机的移动流量，都是可以使用 22 端口访问阿里云远程服务器的，就是家里的 wifi 不行，后来网上找资料，说是由于端口被封，真的坑了好几天，于是我将远程服务器的 ssh 服务端口改成了其他的，比如 22345 就可以了。同时安全组需要放开 22345 端口的入方向。</p>\n</blockquote>\n<h1 id=\"linux安装docker\"><a class=\"anchor\" href=\"#linux安装docker\">#</a> Linux 安装<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9kb2NrZXIvZG9ja2VyLXR1dG9yaWFsLmh0bWw=\"> Docker</span></h1>\n<p>直接使用 yum 安装，简单快捷，会自动配置相应的环境的变量，安装即用。除了自己安装的，千万不要随便删系统文件，我就删一次，最后导致系统崩溃，只能回滚磁盘，然后就导致我之前写的部分文章全部没了😭 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装 docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum -y <span class=\"token function\">install</span> <span class=\"token function\">docker</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 启动 docker 后台服务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">docker</span> start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 测试运行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">docker</span> run hello-world</pre></td></tr></table></figure><p>出现 welcome 就说明安装成功了</p>\n<p><img data-src=\"https://b3logfile.com/file/2021/09/image-5936dd78.png\" alt=\"image.png\" /></p>\n<h1 id=\"docker安装mysql\"><a class=\"anchor\" href=\"#docker安装mysql\">#</a> Docker 安装 MySQL</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装 mysql:5.6, 直接 docker run 他会自动去官方镜想下载</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># MYSQL_ROOT_PASSWORD = 你的数据库密码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> run --name mysql -p <span class=\"token number\">3306</span>:3306 -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> -d mysql:5.6</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># docker 安装的 mysql 默认允许远程连接，可以使用 Navicat 等软件连接数据库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 进入容器 mysql</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it mysql <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 进入数据库 p 后面跟你的密码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>mysql -uroot -pXXX</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 创建数据库 (数据库名:solo; 字符集 utf8mb4; 排序规则 utf8mb4_general_ci)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>create database solo DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 出现 Query OK, 1 row affected (0.00 sec) 表示成功</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#退出数据库</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#退出容器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr></table></figure><h1 id=\"docker安装solo视频教程\"><a class=\"anchor\" href=\"#docker安装solo视频教程\">#</a> Docker 安装<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iM2xvZy5vcmcvc29sby8jZG9jcw==\"> Solo</span> 视频教程</h1>\n<p>拉去 Solo 博客的最新镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull b3log/solo</pre></td></tr></table></figure><p>直接运行以下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run --detach --name solo --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--env <span class=\"token assign-left variable\">RUNTIME_DB</span><span class=\"token operator\">=</span><span class=\"token string\">\"MYSQL\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--env <span class=\"token assign-left variable\">JDBC_USERNAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--env <span class=\"token assign-left variable\">JDBC_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"123456\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--env <span class=\"token assign-left variable\">JDBC_DRIVER</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>--env <span class=\"token assign-left variable\">JDBC_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/solo?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>--rm <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-v /skins/:/opt/solo/skins/ <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>b3log/solo --lute_http<span class=\"token operator\">=</span>http://127.0.0.1:8249 --listen_port<span class=\"token operator\">=</span><span class=\"token number\">80</span> --server_scheme<span class=\"token operator\">=</span>http --server_host<span class=\"token operator\">=</span><span class=\"token number\">120.78</span>.171.206</pre></td></tr></table></figure><p>上面的命令建议手敲，免得出错，参数说明</p>\n<ul>\n<li>--env JDBC_PASSWORD=&quot;123456&quot; 将 123456 换成你的密码</li>\n<li>--listen_port=80 监听的端口</li>\n<li>--server_scheme=http 请求方式，暂时使用 http，后面我们会换成 https</li>\n<li>--server_host=120.78.171.206 你的域名，如果你没有域名可以写 ip 地址</li>\n<li>--rm 因为这个容器后面要删掉，带上 rm 会省很多事。</li>\n</ul>\n<p>执行上诉的命令，如果执行 docker ps 出现 solo，即是运行成功，访问你配置的 ip，即可，可能出现的错误有</p>\n<ol>\n<li>数据库没有建，需要使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF2aWNhdC5jb20uY24v\"> Navicat 15</span>，建立新的数据库</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iM2xvZy5vcmcvc29sby8jZG9jcw==\">第三方皮肤</span>挂载，需要从 github 中下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLzg4MjUwL3NvbG8vdHJlZS9tYXN0ZXIvc3JjL21haW4vcmVzb3VyY2VzL3NraW5z\"> Solo 原有的皮肤</span>后，放到自定义目录中，然后再将第三方皮肤放入同级目录，才可以运行成功。</li>\n<li>如果去掉 - rm，执行 docker ps -a 的时候，就可以看到执行失败的 solo 容器。</li>\n</ol>\n<h1 id=\"安装nginx\"><a class=\"anchor\" href=\"#安装nginx\">#</a> 安装 Nginx</h1>\n<p>安装 nginx 前，我们现在本地建立几个文件，用于存放 nginx 的配置文件等</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 切换到服务器根目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 创建文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> nginx /nginx/conf /nginx/conf.d /nginx/conf.d/cert /nginx/html/web  /nginx/logs /nginx/html</pre></td></tr></table></figure><p><img data-src=\"https://b3logfile.com/file/2021/09/%E6%88%AA%E5%B1%8F2021-09-23_%E4%B8%8B%E5%8D%887.52.05-d21b197e.png\" alt=\"截屏20210923下午7.52.05.png\" /></p>\n<p>目录名字可以自行更换，与挂载的时候保持一致就好了</p>\n<ul>\n<li>nginx 用于存放 docker 下 nginx 自定义文件</li>\n<li>/nginx/conf 存放 nginx 配置文件</li>\n<li>/nginx/log 存放 nginx 日志文件</li>\n<li>/nginx/html 存放 nginx 访问的资源文件</li>\n<li>/nginx/conf.d 存放 ssl 证书和默认配置</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  listen <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\"># 域名还没有备案成功的时候</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  server_name <span class=\"token number\">120.78</span>.171.206<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        root   /usr/share/nginx/html/web<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\"># root   /usr/nginx/html;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        index  index.html index.htm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># autoindex  on;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t      try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ /index.html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\"># proxy_pass http://121.199.58.113:8080;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#try_files $uri /index/map/page.html;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">#location /api &#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">#proxy_pass http://120.78.171.206:8090;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">#&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后使用以下的脚步进行相关的挂载，通常我们更新的文件是 default.conf 文件和 ssl 证书，html 中我又新建了 web 文件，有时候我们需要区分 admin 和 web，因此我就单独建了文件夹</p>\n<p>可以导出自带的配置文件</p>\n<ul>\n<li>docker cp nginx:/etc/nginx/nginx.conf/nginx/conf/nginx.conf 导出配置文件 nginx.conf</li>\n<li>docker cp nginx:/etc/nginx/conf.d  /nginx/conf/conf.d 导出配置为你 nginx.conf</li>\n<li>执行 docker stop nginx，会自动删除现在的 nginx 容器，然后执行如下命令重新启动一个 nginx 容器</li>\n</ul>\n<p>挂载自己的配置文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--name<span class=\"token operator\">=</span>nginx01 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-p <span class=\"token number\">3000</span>:3000 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-v /nginx/logs:/var/log/nginx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-v /nginx/html:/usr/share/nginx/html <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-v /nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-d --rm nginx</pre></td></tr></table></figure><p><img data-src=\"https://b3logfile.com/file/2021/09/image-032d3471.png\" alt=\"image.png\" /></p>\n<p>显示上方流程，即挂载成功</p>\n<h1 id=\"申请ssl证书升级到https\"><a class=\"anchor\" href=\"#申请ssl证书升级到https\">#</a> 申请 ssl 证书，升级到 https</h1>\n<p>阿里云还是一如既往的有<span class=\"exturl\" data-url=\"aHR0cHM6Ly95dW5kdW4uY29uc29sZS5hbGl5dW4uY29tLz9zcG09NTE3Ni4yMDIwNTIwMTAxLnRvcC1uYXYuZGJ1dHRvbi41OTA0NGRmNXBobVpDdiZhbXA7cD1jYXMjL2NlcnRFeHRlbmQvZnJlZQ==\">免费的证书</span>直接，绑定就好，拿来试手</p>\n<p><img data-src=\"https://b3logfile.com/file/2021/09/image-9e623aef.png\" alt=\"image.png\" /></p>\n<p>将下发的.key，.pem 签名证书放到文件夹下，进行对应的配置挂载即可</p>\n<h2 id=\"配置nginx配置文件\"><a class=\"anchor\" href=\"#配置nginx配置文件\">#</a> 配置 nginx 配置文件</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    listen       <span class=\"token number\">443</span> ssl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    server_name  zipblog.top  <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  ssl on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ssl_certificate /ssl/6315565_zipblog.top.pem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ssl_certificate_key /ssl/6315565_zipblog.top.key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  ssl_session_timeout 5m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  ssl_ciphers ALL:<span class=\"token operator\">!</span>ADH:<span class=\"token operator\">!</span>EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  ssl_prefer_server_ciphers on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">#charset koi8-r;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">#access_log  /var/log/nginx/log/host.access.log  main;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        root   /usr/share/nginx/html/web<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\"># root   /usr/nginx/html;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        index  index.html index.htm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\"># autoindex  on;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t      try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ /index.html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># proxy_pass http://121.199.58.113:8080;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">#try_files $uri /index/map/page.html;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">#location /api &#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     <span class=\"token comment\"># proxy_pass http://arrowfield.top:8080;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\"># &#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">#error_page  404              /404.html;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\"># error_page   500 502 503 504  /50x.html;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\"># location = /50x.html &#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">#     root   /usr/share/nginx/html;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\"># &#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">#location ~ \\.php$ &#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">#    proxy_pass   http://127.0.0.1;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">#&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre> </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">#location ~ \\.php$ &#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">#    root           html;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">#    fastcgi_pass   127.0.0.1:9000;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">#    fastcgi_index  index.php;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">#    include        fastcgi_params;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">#&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre> </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\"># deny access to .htaccess files, if Apache's document root</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\"># concurs with nginx's one</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">#location ~ /\\.ht &#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">#    deny  all;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">#&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>server<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  server_name zipblog.top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  rewrite ^<span class=\"token punctuation\">(</span>.*<span class=\"token punctuation\">)</span> https://<span class=\"token variable\">$host</span><span class=\"token variable\">$1</span> permanent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>不重要的部分直接省略了，可以根据自己的需要进行调整</p>\n<p>由于我们现在用的 nginx 容器并未监听 443 端口，所以需要删除现在的容器，重新启动一个新的 nginx 容器</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> stop nginx  <span class=\"token comment\"># 停止容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> nginx <span class=\"token comment\"># 删除容器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 启动新的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> run -d -p <span class=\"token number\">80</span>:80 -p <span class=\"token number\">443</span>:443 --name nginx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-v /nginx/conf/conf.d:/etc/nginx/conf.d <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-v /nginx/html:/usr/share/nginx/html <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-v /nginx/logs:/var/log/nginx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-v /nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-v /nginx/ssl:/ssl/ <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-d --rm nginx</pre></td></tr></table></figure><ul>\n<li>-p 443:443 监听 443 端口</li>\n<li>-v /nginx/ssl:/ssl/ 挂载 ssl 证书目录</li>\n</ul>\n<p><img data-src=\"https://b3logfile.com/file/2021/09/%E6%88%AA%E5%B1%8F2021-09-23_%E4%B8%8B%E5%8D%887.54.39-4dcf05f2.png\" alt=\"截屏20210923下午7.54.39.png\" /></p>\n<h2 id=\"腾讯云\"><a class=\"anchor\" href=\"#腾讯云\">#</a> 腾讯云</h2>\n<h2 id=\"阿里云\"><a class=\"anchor\" href=\"#阿里云\">#</a> 阿里云</h2>\n<h2 id=\"其他平台\"><a class=\"anchor\" href=\"#其他平台\">#</a> 其他平台</h2>\n<h2 id=\"上传证书\"><a class=\"anchor\" href=\"#上传证书\">#</a> 上传证书</h2>\n<h1 id=\"将solo通过nginx代理https访问\"><a class=\"anchor\" href=\"#将solo通过nginx代理https访问\">#</a> 将 solo 通过 nginx 代理 https 访问</h1>\n<p>让 solo 还是跑在 8080 端口上，通过 nginx 代理到 443 端口即可，由于我们上面启动 solo 时添加了 --rm 参数，只需要 docker stop solo 即可自动删除 solo 容器，然后我们重新启动一个 solo 容器</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run --detach --name solo --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--env <span class=\"token assign-left variable\">RUNTIME_DB</span><span class=\"token operator\">=</span><span class=\"token string\">\"MYSQL\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--env <span class=\"token assign-left variable\">JDBC_USERNAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--env <span class=\"token assign-left variable\">JDBC_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"123456\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--env <span class=\"token assign-left variable\">JDBC_DRIVER</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>--env <span class=\"token assign-left variable\">JDBC_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/solo?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-v /skins/:/opt/solo/skins/ <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--rm b3log/solo --listen_port<span class=\"token operator\">=</span><span class=\"token number\">8080</span> --server_scheme<span class=\"token operator\">=</span>https --server_host<span class=\"token operator\">=</span>zipblog.top --server_port<span class=\"token operator\">=</span></pre></td></tr></table></figure><ul>\n<li>--server_scheme=http 换成 --server_scheme=https 即可</li>\n<li>--server_port：最终访问端口，使用浏览器默认的 80 或者 443 的话值留空即可</li>\n</ul>\n<p>然后我们去配置 nginx 配置文件，实现 nginx 反向代理</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstream backend <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    server zipblog.top:8080<span class=\"token punctuation\">;</span> <span class=\"token comment\"># Solo 监听端口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    listen       <span class=\"token number\">443</span> ssl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    server_name  zipblog.top  <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    access_log off<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  ssl on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  ssl_certificate /ssl/6315565_zipblog.top.pem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> ssl_certificate_key /ssl/6315565_zipblog.top.key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  ssl_session_timeout 5m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  ssl_ciphers ALL:<span class=\"token operator\">!</span>ADH:<span class=\"token operator\">!</span>EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  ssl_prefer_server_ciphers on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">#charset koi8-r;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">#access_log  /var/log/nginx/log/host.access.log  main;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        proxy_pass http://backend<span class=\"token variable\">$request_uri</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        proxy_set_header  Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        proxy_set_header  X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        client_max_body_size  10m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">#location /api &#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     <span class=\"token comment\"># proxy_pass http://arrowfield.top:8080;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token comment\"># &#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">#error_page  404              /404.html;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\"># error_page   500 502 503 504  /50x.html;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\"># location = /50x.html &#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">#     root   /usr/share/nginx/html;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\"># &#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">#location ~ \\.php$ &#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">#    proxy_pass   http://127.0.0.1;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">#&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre> </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">#location ~ \\.php$ &#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">#    root           html;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">#    fastcgi_pass   127.0.0.1:9000;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">#    fastcgi_index  index.php;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">#    include        fastcgi_params;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">#&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre> </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\"># deny access to .htaccess files, if Apache's document root</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\"># concurs with nginx's one</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">#location ~ /\\.ht &#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">#    deny  all;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">#&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>server<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  server_name zipblog.top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  rewrite ^<span class=\"token punctuation\">(</span>.*<span class=\"token punctuation\">)</span> https://<span class=\"token variable\">$host</span><span class=\"token variable\">$1</span> permanent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\"># 替换上面部分即可</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\"># 按 esc，然后输入:wq 保持退出</span></pre></td></tr></table></figure><blockquote>\n<p>注意！！！Nginx 反代理上面的方式可能出现问题参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWNwYWkuY29tL2FydGljbGUvMTQ5Mjg4MTM3ODU4OCNOR0lOWC0lRTUlOEYlOEQlRTQlQkIlQTM=\"> Nginx 反代</span></p>\n</blockquote>\n<p>重启 nginx，docker restart nginx</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<h2 id=\"皮肤挂载\"><a class=\"anchor\" href=\"#皮肤挂载\">#</a> 皮肤挂载</h2>\n<ul>\n<li>在你的服务器上创建一个目录用于存放皮肤，比如我的 /dockerData/solo/skins/</li>\n<li>然后将你要挂载的皮肤放到上面那个目录下</li>\n<li>最后删除当前容器 重新启动一个容器，添加参数 --v /dockerData/solo/skins/:/opt/solo/skins/，这个添</li>\n<li>加时要注意位置，要添加到 b3log/solo --listen... 的上面一排</li>\n<li>使用挂载皮肤时，默认会使用 Pingsu,</li>\n</ul>\n<h2 id=\"皮肤推荐\"><a class=\"anchor\" href=\"#皮肤推荐\">#</a> 皮肤推荐</h2>\n<p>原作者开源了两款皮肤 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWNwYWkuY29tL2FydGljbGUvMTU2NjQ2ODEzODI4OQ==\">solo-nexmoe</span>，因为我很懒的原因，solo-star 没有手机端，所以你可以多挂载一款皮肤们比如官方皮肤 Pinghsu，如果你没有这款皮肤就会报错，没有请前往<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2IzbG9nL3NvbG8tc2tpbnM=\"> solo-skins</span> 下载</p>\n<h2 id=\"数据库占用内存过大优化\"><a class=\"anchor\" href=\"#数据库占用内存过大优化\">#</a> 数据库占用内存过大优化</h2>\n<p>由于我们购买的服务器是内存只有 1G，然后 docker 安装的 mysql 虽然很快，但是实际上占用内存非常大，之前服务器在腾讯云的时候就经常挂掉，排查了很久才发现是 docker 下 mysql 的问题，迁移到阿里云后倒是没出先挂掉的问题，但是服务器内存占用也一直在 90% 以上，所以我们对 mysql 容器进行一些优化。<br />\n由于容器内不能 vim，所以我们将 mysql 的配置文件复制到服务器上改了之后再复制回去，也可以将配置文件挂载到服务器上，过程我不多讲，只讲核心部分。</p>\n<p>这里注意，如果你要删除容器重新挂载的话，请提前备份 mysql 数据，不然你就属于删库了<br />\n这里注意，如果你要删除容器重新挂载的话，请提前备份 mysql 数据，不然你就属于删库了<br />\n这里注意，如果你要删除容器重新挂载的话，请提前备份 mysql 数据，不然你就属于删库了<br />\n重要的话说三遍</p>\n<p>在配置文件 /etc/mysql/mysql.conf.d/mysqld.cnf 中添加</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">performance_schema_max_table_instances</span><span class=\"token operator\">=</span><span class=\"token number\">400</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">table_definition_cache</span><span class=\"token operator\">=</span><span class=\"token number\">400</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">table_open_cache</span><span class=\"token operator\">=</span><span class=\"token number\">256</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 从容器中复制到服务器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> mysql:/etc/mysql/mysql.conf.d/mysqld.cnf /dockerData/mysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 从服务器复制到容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> /dockerData/mysql/mysqld.cnf mysql:/etc/mysql/mysql.conf.d/mysqld.cnf</pre></td></tr></table></figure><p>改完之后记得重启 mysql，docker restart mysql</p>\n<h2 id=\"启动lute\"><a class=\"anchor\" href=\"#启动lute\">#</a> 启动 lute</h2>\n<p>此内容适用于 solo3.6.5+</p>\n<ul>\n<li>启动 Lute 参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZDI0Ni5jb20vYXJ0aWNsZS8xNTY5MjQwMTg5NjAx\"> Lute HTTP 使用指南</span></li>\n<li>在 solo 启动参数末尾追加  <code>--lute_http=http://127.0.0.1:8249/--lute_http=http://localhost:8249/--lute_http=solo</code>  成功启动后在终端输入 docker logs solo, 日志显示有 luteAvailable=true 即表示启用 lute 成功</li>\n</ul>\n<h2 id=\"采用solo博客内置的cdn加速\"><a class=\"anchor\" href=\"#采用solo博客内置的cdn加速\">#</a> 采用 Solo 博客内置的 cdn 加速</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run --detach --name solo --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    --env <span class=\"token assign-left variable\">RUNTIME_DB</span><span class=\"token operator\">=</span><span class=\"token string\">\"MYSQL\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    --env <span class=\"token assign-left variable\">JDBC_USERNAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    --env <span class=\"token assign-left variable\">JDBC_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"123456\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    --env <span class=\"token assign-left variable\">JDBC_DRIVER</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    --env <span class=\"token assign-left variable\">JDBC_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/solo?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    -v /skins/:/opt/solo/skins/\t<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    --rm <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    b3log/solo --lute_http<span class=\"token operator\">=</span>http://127.0.0.1:8249  --listen_port<span class=\"token operator\">=</span><span class=\"token number\">8080</span> --static_server_scheme<span class=\"token operator\">=</span>https --static_server_host<span class=\"token operator\">=</span>cdn.jsdelivr.net --static_server_port<span class=\"token operator\">=</span>  --static_path<span class=\"token operator\">=</span>/gh/Arrowfield/solo@4.3.2/src/main/resources    --server_scheme<span class=\"token operator\">=</span>https --server_host<span class=\"token operator\">=</span>zipblog.top --server_port<span class=\"token operator\">=</span></pre></td></tr></table></figure><h2 id=\"拉取github上的仓库\"><a class=\"anchor\" href=\"#拉取github上的仓库\">#</a> 拉取 github 上的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZDI0Ni5jb20vYXJ0aWNsZS8xNTU3MjM4MzI3NDU4\">仓库</span></h2>\n<p>现在似乎不支持，老是报错</p>\n<p><img data-src=\"https://b3logfile.com/file/2021/09/image-d7558d42.png\" alt=\"image.png\" /></p>\n<h2 id=\"接入github评论系统\"><a class=\"anchor\" href=\"#接入github评论系统\">#</a> 接入 github 评论系统</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZDI0Ni5jb20vYXJ0aWNsZS8xNTk0OTg4MDE5Mjg3\">似乎新版本的 solo 取消了内置的评论系统</span>，使用 gittalk 作为默认评论系统</p>\n<p><img data-src=\"https://b3logfile.com/file/2021/09/image-d909f599.png\" alt=\"image.png\" /></p>\n<blockquote>\n<p>文章转载声明：来自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5rZHAuY24vYXJ0aWNsZXMvMjAxOS8wOC8wNi8xNTY1MDIxOTMxNzc1Lmh0bWwjJUU2JTk1JUIwJUU2JThEJUFFJUU1JUJBJTkzJUU1JThEJUEwJUU3JTk0JUE4JUU1JTg2JTg1JUU1JUFEJTk4JUU4JUJGJTg3JUU1JUE0JUE3JUU0JUJDJTk4JUU1JThDJTk2\">墨殇的技术博客</span> /<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5rZHAuY24vYXJ0aWNsZXMvMjAxOS8wOC8wNi8xNTY1MDIxOTMxNzc1Lmh0bWw=\"> 从零开始安装 solo 博客</span></p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/04/02/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2022/04/02/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/",
            "title": "个人博客的开发流程",
            "date_published": "2022-04-02T07:23:00.000Z",
            "content_html": "<p>网上有许多开源博客框架，可以让我们快速的搭建自己的个人网站。常见的博客框架有：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNDIxMTcwOQ==\">Typecho</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi53b3JkcHJlc3Mub3JnLw==\">Wordpress</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWxvLnJ1bi8=\">Halo</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iM2xvZy5vcmcvc29sby8=\">Solo</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWVwcmVzcy52dWVqcy5vcmcvemgv\">Vuepress</span>。这些都可以大大简化我们搭建个人网站的流程，并且可以自定义我们喜欢的主题。个人网站的好处就是可以让我们可以更加自由的写自己的文章，如果有兴趣开发自己的博客框架，就可以参考以下的建站流程</p>\n<h1 id=\"开发个人博客\"><a class=\"anchor\" href=\"#开发个人博客\">#</a> 开发个人博客</h1>\n<p>开发前提：<br />\n系统需要安装<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==\"> Node</span> 环境，直接下载长期维护版，因为这个版本可能比较稳定。有时候版本过高会导致奇奇怪怪的问题，安装的时候直接下一步就好。个人比较推荐 v14.8.0，因为我们在开发的过程中，可以需要用到 node-sass 的依赖包，执行 yarn install 的时候就会报错，两种方式解决，一是将 node-sass 改成 sass【官方推荐】，二是将 node 的版本降低，经过测试 v16 是会报错的。开发工具的话可以选则<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\"> vscode</span> 或者<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS93ZWJzdG9ybS8=\"> webstorm</span>，webstrom 可以使用教育邮箱申请，或者去 TB 购买账号<br />\n后台的技术栈使用的是 Java，因此我们还需要安装 jdk，通常使用的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL0Fkb3B0T3BlbkpESy84L2pkay94NjQv\"> jdk1.8 国内镜像下载地址</span>版本。开发工具下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhLw==\"> IntelliJ IDEA</span>，可以选择社区版，这个版本是免费的。下载 <code>Spring Assistant</code>  插件，构建 springboot 项目，安装 pom 相关依赖，运行项目<img data-src=\"https://cdn.zipblog.top/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16483523743010.png?imageView2/0/q/75\" alt=\"企业微信截图_16483523743010.png\" /> 如果碰到依赖包下载特别慢的情况，可以重新配置<a href=\"%5Bhttps://cdn.rawchen.com/files/apache-maven-3.6.1.zip%5D(https://cdn.rawchen.com/files/apache-maven-3.6.1.zip)\"> maven</a> 的下载镜像，配置 maven 的 <code>settings.xml</code>  文件即可</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 检查 node 版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">node</span> -v</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 全局安装 cnpm</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g cnpm --registry<span class=\"token operator\">=</span>https://registry.npm.taobao.org</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 全局安装 yarn</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g <span class=\"token function\">yarn</span> --registry<span class=\"token operator\">=</span>https://registry.npm.taobao.org</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># yarn 路径并添加到 $PATH 在 Linux 中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/lib/node_modules/yarn/bin/:<span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 安装 vue-cli</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">yarn</span> global <span class=\"token function\">add</span> @vue/cli</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 创建 vue 项目</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vue create hello-world</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 运行项目</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">yarn</span> serve</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 检查 jdk 版本</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>java -version</pre></td></tr></table></figure><p>前端主要技术栈：vue + vue-cli + vue-router + vuex + axios</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmc=\">vue</span>：渐进式的 JavaScript 的框架</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poLw==\">vue-cli</span>：Vue.js 开发的标准工具</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poLw==\">vue-router</span>：Vue.js 官方的路由管理器</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC8=\">vuex</span>：Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5heGlvcy1qcy5jb20v\">axios</span>：易用、简洁且高效的 http 库</li>\n</ul>\n<p>前端主要还是使用上诉的依赖包，还包含一些辅助依赖包，如 @fancyapps/ui，可以有很好的文章图片切换的友好交互；@moefe/vue-aplayer 一款音乐播放器的插件，可以显示歌词以及音乐的播放；js-cookie 可以简化 cookie 的操作流程；live2d-widget 卡通人物插件，美化博客相关页面等等；具体可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbWNhbi96aXBCbG9nLmdpdA==\">开源代码</span>中的 package.json 文件。</p>\n<p>后端主要技术栈：springboot + mybatis + mysql</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWJvb3Q=\">Spring Boot</span>：解决企业应用开发的复杂性后端开发框架</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvaW5kZXguaHRtbA==\">MyBatis</span>：MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXlzcWwuY29tLw==\">MySQL</span>：关系型数据库管理系统</li>\n</ul>\n<p>如果使用 springboot 做 web 开发服务端，只需要引入 web 这个 starter 依赖即可，springboot 使用的是内置的 tomcat 作为 web 服务器</p>\n<h1 id=\"前后端代码托管\"><a class=\"anchor\" href=\"#前后端代码托管\">#</a> 前后端代码托管</h1>\n<p>前后端的代码均托管在码云上，使用 docker 进行项目的自动化部署<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbWNhbi96aXBCbG9nLmdpdA==\">前台</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbWNhbi96aXBCbG9nU2VydmVyLmdpdA==\">后台</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbWNhbi96aXBCbG9nQWRtaW4=\">管理端</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODM3Nzc0Mzk3NDQ3\">docker 部署 vue 项目</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnpldHMuY24vIy9hcnRpY2xlLzk=\">压力测试工具</span></p>\n<h1 id=\"部署线上\"><a class=\"anchor\" href=\"#部署线上\">#</a> 部署线上</h1>\n<p>我们可以在阿里云购买 Linux 系统的 ECS 云服务器，进行项目构建的流程。安装好环境后，我们将执行以下的命令构建项目，管理端可以直接使用对应的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGh1Yi5pby92dWUtZWxlbWVudC1hZG1pbi1zaXRlL3poLw==\"> UI 页面</span></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g @vue/cli</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># OR</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> global <span class=\"token function\">add</span> @vue/cli</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 前端 vue 项目的构建</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vue create my-project</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># OR</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>vue ui</pre></td></tr></table></figure><p>如果我们使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2Fzcy5oay8=\"> sass 这个 css 扩展语言</span>，需要执行以下的代码，但是这块有个坑，它要求系统要安装 python2.7，否则在安装依赖的时候，会报错。并且如果项目使用了预渲染，打包生产环境的时候也会报错。windows 常用的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODg2NDE3L2FydGljbGUvZGV0YWlscy8xMDMxMjM2NTk=\">解决方式</span>，Vue 的预渲染可能导致 Linux 环境打包生产模式失败。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i node-sass sass-loader style-loader -D</pre></td></tr></table></figure><h2 id=\"linux安装jdk\"><a class=\"anchor\" href=\"#linux安装jdk\">#</a> Linux 安装 jdk</h2>\n<p>执行以下的脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 运行环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> java-1.8.0-openjdk java-1.8.0-openjdk-devel.x86_64</pre></td></tr></table></figure><h2 id=\"安装docker\"><a class=\"anchor\" href=\"#安装docker\">#</a> 安装 Docker</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 最新的系统不需要 update</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum update </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token function\">docker</span></pre></td></tr></table></figure><p>查看端口占用情况</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>终止8080端口</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">netstat</span> -tunlp<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">kill</span> -9 pid</pre></td></tr></table></figure><p>后台运行 springboot 程序</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 后台运行 jar 包 自定义端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">nohup</span> java -jar zip-blog-serve-0.0.1-SNAPSHOT.jar --server.port<span class=\"token operator\">=</span><span class=\"token number\">8080</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><p>检查防火墙的运行状态</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl status firewalld</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">service</span> firewalld stop</pre></td></tr></table></figure><p>安装依赖的工具</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 云服务器需要装的 node,git,nginx 环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> -y nodejs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yum <span class=\"token function\">install</span> -y <span class=\"token function\">git</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> pull nginx</pre></td></tr></table></figure><p>Linux 下载码云上的代码</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#切到跟目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> / </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#创建文件夹</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> zipBlog </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">cd</span> zipBlog</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> clone https://gitee.com/mcan/zipBlog.git</pre></td></tr></table></figure><p>新建好对应的映射文件后，即可运行 docker 中的 <code>映射80端口</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--name<span class=\"token operator\">=</span>nginx01 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-p <span class=\"token number\">80</span>:80 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-v /nginx/logs:/var/log/nginx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-v /nginx/html:/usr/share/nginx/html <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-v /nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-d --rm nginx</pre></td></tr></table></figure><p>映射 443 端口</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>hljs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--name<span class=\"token operator\">=</span>nginx02 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-p <span class=\"token number\">80</span>:80 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-p <span class=\"token number\">443</span>:443 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-v /nginx/logs:/var/log/nginx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-v /nginx/html:/usr/share/nginx/html <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-v /nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-v /nginx/conf.d/cert/:/etc/nginx/cert <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-d --rm nginx</pre></td></tr></table></figure><p>快速删除 node 包</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>hljs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cnpm <span class=\"token function\">install</span> rimraf -g </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 使用命令删除 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rimraf node_modules</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># jarb 上传工具</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>yum -y <span class=\"token function\">install</span> lrzsz</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rz -y</pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNTMwMjY4MA==\">node 的版本太低的解决方式</span></p>\n<p>强制复制的命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>hljs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">\\</span>cp -rf dist/* /nginx/html/web/ </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 8000 端口运行 vue</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> serve --port <span class=\"token number\">8000</span></pre></td></tr></table></figure><p>家里的网络和 ecs 阿里云服务器使用 npm 安装 前提安装 windows 运行工具包</p>\n<p>公司的网络使用 yarn</p>\n<p>node-sass 安装失败：降低 node 的版本到 v14.8.0 安装<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy9taXJyb3JzL3B5dGhvbi8yLjcv\"> python2.7</span> 和初始化 windows 工具依赖环境</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hNDhlMDYxYWU4ZmQ=\">神坑</span></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 ipa-gothic-fonts xorg-x11-fonts-100dpi xorg-x11-fonts-75dpi xorg-x11-utils xorg-x11-fonts-cyrillic xorg-x11-fonts-Type1 xorg-x11-fonts-misc</pre></td></tr></table></figure><h1 id=\"接入云评论\"><a class=\"anchor\" href=\"#接入云评论\">#</a> 接入云评论</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>hljs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save vuepress-plugin-comment</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> valine --save</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># npm 配置代理服务器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> config --global https.proxy <span class=\"token number\">127.0</span>.0.1:12639</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> config --global http.proxy <span class=\"token number\">127.0</span>.0.1:12639</pre></td></tr></table></figure><h1 id=\"代码规范\"><a class=\"anchor\" href=\"#代码规范\">#</a> 代码规范</h1>\n<ul>\n<li>同级目录下使用相对路径，非同级使用 @</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2hhcnRzLmFwYWNoZS5vcmcvemgvY29kaW5nLXN0YW5kYXJkLmh0bWwjJUU0JUJCJUEzJUU3JUEwJTgxJUU4JUE3JTg0JUU4JThDJTgz\">参考</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92My5jbi52dWVqcy5vcmcvc3R5bGUtZ3VpZGUv\">Vue 风格指南</span></li>\n</ul>\n<p>备注：服务器宕机后的重启步骤</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start <span class=\"token function\">docker</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run -d -p <span class=\"token number\">80</span>:80 -p <span class=\"token number\">443</span>:443 --name nginx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-v /nginx/conf/conf.d:/etc/nginx/conf.d <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-v /nginx/html:/usr/share/nginx/html <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-v /nginx/logs:/var/log/nginx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-v /nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-v /nginx/ssl:/ssl/ <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-v /nginx/cache:/nginx/cache <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-d --rm nginx</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run --detach --name solo --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    --env <span class=\"token assign-left variable\">RUNTIME_DB</span><span class=\"token operator\">=</span><span class=\"token string\">\"MYSQL\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    --env <span class=\"token assign-left variable\">JDBC_USERNAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    --env <span class=\"token assign-left variable\">JDBC_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"919496\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    --env <span class=\"token assign-left variable\">JDBC_DRIVER</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    --env <span class=\"token assign-left variable\">JDBC_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"jdbc:mysql://127.0.0.1:3307/solo?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    -v /skins/:/opt/solo/skins/\t<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    --rm <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    b3log/solo --lute_http<span class=\"token operator\">=</span>http://127.0.0.1:8249  --listen_port<span class=\"token operator\">=</span><span class=\"token number\">8080</span> --static_server_scheme<span class=\"token operator\">=</span>https --static_server_host<span class=\"token operator\">=</span>cdn.jsdelivr.net --static_server_port<span class=\"token operator\">=</span>  --static_path<span class=\"token operator\">=</span>/gh/Arrowfield/solo@4.3.2/src/main/resources    --server_scheme<span class=\"token operator\">=</span>https --server_host<span class=\"token operator\">=</span>zipblog.top --server_port<span class=\"token operator\">=</span></pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}